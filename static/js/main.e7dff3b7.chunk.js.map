{"version":3,"sources":["CurrencyRow.js","App.js","index.js"],"names":["CurrencyRow","currencyOptions","selectedCurrency","onChangeCurrency","onChangeAmount","amount","type","className","value","onChange","map","option","key","BASE_URL","App","toAmount","fromAmount","useState","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","setAmount","amountInFromCurrency","setAmountInFromCurrency","useEffect","fetch","then","response","json","data","firstCurrency","Object","keys","rates","base","res","e","target","ReactDOM","render","document","getElementById"],"mappings":"2NA2BeA,MAzBf,YAMI,IALFC,EAKC,EALDA,gBACAC,EAIC,EAJDA,iBACAC,EAGC,EAHDA,iBACAC,EAEC,EAFDA,eACAC,EACC,EADDA,OAEA,OACE,6BACE,2BACEC,KAAK,SACLC,UAAU,QACVC,MAAOH,EACPI,SAAUL,IAEZ,4BAAQI,MAAON,EAAkBO,SAAUN,GACxCF,EAAgBS,KAAI,SAACC,GAAD,OACnB,4BAAQC,IAAKD,EAAQH,MAAOG,GACzBA,SChBPE,EAAW,yCAuEFC,MArEf,WAAgB,IAQVC,EAAUC,EARD,EACiCC,mBAAS,IAD1C,mBACNhB,EADM,KACWiB,EADX,OAE2BD,qBAF3B,mBAENE,EAFM,KAEQC,EAFR,OAGuBH,qBAHvB,mBAGNI,EAHM,KAGMC,EAHN,OAI2BL,qBAJ3B,mBAINM,EAJM,KAIQC,EAJR,OAKeP,mBAAS,GALxB,mBAKNZ,EALM,KAKEoB,EALF,OAM2CR,oBAAS,GANpD,mBAMNS,EANM,KAMgBC,EANhB,KA+Cb,OAtCID,GACFV,EAAaX,EACbU,EAAWV,EAASkB,IAEpBR,EAAWV,EACXW,EAAaX,EAASkB,GAGxBK,qBAAU,WACRC,MAAMhB,GACHiB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAMC,EAAgBC,OAAOC,KAAKH,EAAKI,OAAO,GAC9CnB,EAAmB,CAACe,EAAKK,MAAP,mBAAgBH,OAAOC,KAAKH,EAAKI,UACnDjB,EAAgBa,EAAKK,MACrBhB,EAAcY,GACdV,EAAgBS,EAAKI,MAAMH,SAE9B,IAEHN,qBAAU,WACY,MAAhBT,GAAsC,MAAdE,GAC1BQ,MAAM,GAAD,OAAIhB,EAAJ,iBAAqBM,EAArB,oBAA6CE,IAC/CS,MAAK,SAACS,GAAD,OAASA,EAAIP,UAClBF,MAAK,SAACG,GAAD,OAAUT,EAAgBS,EAAKI,MAAMhB,SAE9C,CAACF,EAAcE,IAahB,oCACE,uCACA,kBAAC,EAAD,CACEpB,gBAAiBA,EACjBC,iBAAkBiB,EAClBhB,iBAAkB,SAACqC,GAAD,OAAOpB,EAAgBoB,EAAEC,OAAOjC,QAClDJ,eAjBN,SAAgCoC,GAC9Bf,EAAUe,EAAEC,OAAOjC,OACnBmB,GAAwB,IAgBpBtB,OAAQW,IAEV,yBAAKT,UAAU,UAAf,KACA,kBAAC,EAAD,CACEN,gBAAiBA,EACjBC,iBAAkBmB,EAClBlB,iBAAkB,SAACqC,GAAD,OAAOlB,EAAckB,EAAEC,OAAOjC,QAChDJ,eApBN,SAA8BoC,GAC5Bf,EAAUe,EAAEC,OAAOjC,OACnBmB,GAAwB,IAmBpBtB,OAAQU,MCjEhB2B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e7dff3b7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction CurrencyRow({\r\n  currencyOptions,\r\n  selectedCurrency,\r\n  onChangeCurrency,\r\n  onChangeAmount,\r\n  amount,\r\n}) {\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"number\"\r\n        className=\"input\"\r\n        value={amount}\r\n        onChange={onChangeAmount}\r\n      />\r\n      <select value={selectedCurrency} onChange={onChangeCurrency}>\r\n        {currencyOptions.map((option) => (\r\n          <option key={option} value={option}>\r\n            {option}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\nexport default CurrencyRow;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport CurrencyRow from \"./CurrencyRow\";\r\n\r\nconst BASE_URL = \"https://api.exchangeratesapi.io/latest\";\r\n\r\nfunction App() {\r\n  const [currencyOptions, setCurrencyOptions] = useState([]);\r\n  const [fromCurrency, setFromCurrency] = useState();\r\n  const [toCurrency, setToCurrency] = useState();\r\n  const [exchangeRate, setExchangeRate] = useState();\r\n  const [amount, setAmount] = useState(1);\r\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true);\r\n\r\n  let toAmount, fromAmount;\r\n  if (amountInFromCurrency) {\r\n    fromAmount = amount;\r\n    toAmount = amount * exchangeRate;\r\n  } else {\r\n    toAmount = amount;\r\n    fromAmount = amount / exchangeRate;\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch(BASE_URL)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const firstCurrency = Object.keys(data.rates)[0];\r\n        setCurrencyOptions([data.base, ...Object.keys(data.rates)]);\r\n        setFromCurrency(data.base);\r\n        setToCurrency(firstCurrency);\r\n        setExchangeRate(data.rates[firstCurrency]);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (fromCurrency != null && toCurrency != null) {\r\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\r\n        .then((res) => res.json())\r\n        .then((data) => setExchangeRate(data.rates[toCurrency]));\r\n    }\r\n  }, [fromCurrency, toCurrency]);\r\n\r\n  function handleFromAmountChange(e) {\r\n    setAmount(e.target.value);\r\n    setAmountInFromCurrency(true);\r\n  }\r\n\r\n  function handleToAmountChange(e) {\r\n    setAmount(e.target.value);\r\n    setAmountInFromCurrency(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Convert</h1>\r\n      <CurrencyRow\r\n        currencyOptions={currencyOptions}\r\n        selectedCurrency={fromCurrency}\r\n        onChangeCurrency={(e) => setFromCurrency(e.target.value)}\r\n        onChangeAmount={handleFromAmountChange}\r\n        amount={fromAmount}\r\n      />\r\n      <div className=\"equals\">=</div>\r\n      <CurrencyRow\r\n        currencyOptions={currencyOptions}\r\n        selectedCurrency={toCurrency}\r\n        onChangeCurrency={(e) => setToCurrency(e.target.value)}\r\n        onChangeAmount={handleToAmountChange}\r\n        amount={toAmount}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}